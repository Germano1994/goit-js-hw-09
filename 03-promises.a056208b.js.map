{"mappings":"YAoBA,SAASA,EAAiBC,EAAQC,EAAYC,GAE5C,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAQG,IAAK,CAE/BC,EAAcD,EAAI,EADJF,EAAaE,EAAID,GAEhCG,MAAK,SAAAC,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MACjBC,QAAQC,IAAI,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAE3DI,OAAM,SAAAN,G,IAAGC,EAAQD,EAARC,SAAUC,EAAKF,EAALE,MAClBC,QAAQC,IAAI,sBAAqCC,OAAfJ,EAAS,QAAYI,OAANH,EAAM,M,IAExDK,SAAQ,WACPC,aAAaC,UAAW,C,KAK5B,SAASX,EAAcG,EAAUC,GAC/B,OAAO,IAAIQ,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACT,IAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAS,CAAEhB,WAAUC,SAEvBY,EACFH,EAAQM,GAERL,EAAOK,E,GAERf,E,IAhDPgB,SAASC,cAAc,SAASC,iBAAiB,UAEjD,SAAsBC,GACpBA,EAAMC,iBAEgBJ,SAASC,cAAc,gBAEhCV,UAAW,EAExB,IAAMc,EAAaL,SAASC,cAAc,uBACpCK,EAAYN,SAASC,cAAc,sBACnCM,EAAcP,SAASC,cAAc,wBAErCxB,EAAa+B,SAASH,EAAWI,OACjC/B,EAAO8B,SAASF,EAAUG,OAGhClC,EAFeiC,SAASD,EAAYE,OAEXhC,EAAYC,E","sources":["src/js/03-promises.js"],"sourcesContent":["document.querySelector(\".form\").addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n   const submitButton = document.querySelector(\".form button\");\n\n  submitButton.disabled = true;\n\n  const delayInput = document.querySelector(\"input[name='delay']\");\n  const stepInput = document.querySelector(\"input[name='step']\");\n  const amountInput = document.querySelector(\"input[name='amount']\");\n\n  const firstDelay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  generatePromises(amount, firstDelay, step);\n}\n\nfunction generatePromises(amount, firstDelay, step) {\n\n  for (let i = 0; i < amount; i++) {\n    const delay = firstDelay + i * step;\n    createPromise(i + 1, delay)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  })\n  .finally(() => {\n    submitButton.disabled = false;\n  });\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      const result = { position, delay };\n\n      if (shouldResolve) {\n        resolve(result);\n      } else {\n        reject(result);\n      }\n    }, delay);\n  });\n}\n"],"names":["$ce04d3a99e08e73b$var$generatePromises","amount","firstDelay","step","i","$ce04d3a99e08e73b$var$createPromise","then","param","position","delay","console","log","concat","catch","finally","submitButton","disabled","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","result","document","querySelector","addEventListener","event","preventDefault","delayInput","stepInput","amountInput","parseInt","value"],"version":3,"file":"03-promises.a056208b.js.map"}