{"mappings":"AAqCA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACT,MAAMC,EAAgBC,KAAKC,SAAW,GAChCC,EAAS,C,SAAET,E,MAAUC,GAEvBK,EACFH,EAAQM,GAERL,EAAOK,EAAO,GAEfR,EAAM,G,CAhDbS,SAASC,cAAc,SAASC,iBAAiB,UAEjDC,eAA4BC,GAC1BA,EAAMC,iBAGN,MAAMC,EAAaN,SAASC,cAAc,uBACpCM,EAAYP,SAASC,cAAc,sBACnCO,EAAcR,SAASC,cAAc,wBACrCQ,EAAST,SAASC,cAAc,UAEtCQ,EAAOC,UAAW,EAElB,MAAMC,EAAaC,SAASN,EAAWO,OACjCC,EAAOF,SAASL,EAAUM,OAC1BE,EAASH,SAASJ,EAAYK,aAOtCV,eAAgCY,EAAQJ,EAAYG,GAElD,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAC/B,MAAMC,EAAQN,EAAaK,EAAIF,QAC1BzB,EAAc2B,EAAI,EAAGC,GAC3BC,MAAK,EAAC5B,SAAEA,EAAQC,MAAEA,MACjB4B,QAAQC,IAAI,uBAAqB9B,QAAiBC,MAAU,IAE7D8B,OAAM,EAAC/B,SAAEA,EAAQC,MAAEA,MAClB4B,QAAQC,IAAI,sBAAoB9B,QAAeC,MAAU,G,EAdrD+B,CAAiBP,EAAQJ,EAAYG,GAE3CL,EAAOC,UAAW,C","sources":["src/js/03-promises.js"],"sourcesContent":["document.querySelector(\".form\").addEventListener(\"submit\", handleSubmit);\n\nasync function handleSubmit(event) {\n  event.preventDefault();\n\n  \n  const delayInput = document.querySelector(\"input[name='delay']\");\n  const stepInput = document.querySelector(\"input[name='step']\");\n  const amountInput = document.querySelector(\"input[name='amount']\");\n  const button = document.querySelector(\"button\");\n\n  button.disabled = true;\n\n  const firstDelay = parseInt(delayInput.value);\n  const step = parseInt(stepInput.value);\n  const amount = parseInt(amountInput.value);\n\n  await generatePromises(amount, firstDelay, step);\n\n  button.disabled = false;\n}\n\nasync function generatePromises(amount, firstDelay, step) {\n\n  for (let i = 0; i < amount; i++) {\n    const delay = firstDelay + i * step;\n   await createPromise(i + 1, delay)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  \n}\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n      const result = { position, delay };\n\n      if (shouldResolve) {\n        resolve(result);\n      } else {\n        reject(result);\n      }\n    }, delay);\n  });\n}\n\n\n\n"],"names":["$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","shouldResolve","Math","random","result","document","querySelector","addEventListener","async","event","preventDefault","delayInput","stepInput","amountInput","button","disabled","firstDelay","parseInt","value","step","amount","i","delay1","then","console","log","catch","$47d4ff9957288465$var$generatePromises"],"version":3,"file":"03-promises.4b8b71a3.js.map"}